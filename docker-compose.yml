version: '3.8'

services:
  # FrostyFlow前端应用
  frostyflow-frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    image: frostyflow:latest
    container_name: frostyflow-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_ENVIRONMENT=production
    volumes:
      # 挂载配置文件（可选）
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - frostyflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.frostyflow.description=FrostyFlow Multi-chain Liquid Staking Platform"
      - "com.frostyflow.version=1.0.0"

  # Redis缓存（可选）
  redis:
    image: redis:7-alpine
    container_name: frostyflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    networks:
      - frostyflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server /etc/redis/redis.conf

  # Nginx负载均衡器（可选，用于多实例部署）
  nginx-lb:
    image: nginx:alpine
    container_name: frostyflow-nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - frostyflow-network
    restart: unless-stopped
    depends_on:
      - frostyflow-frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务 - Prometheus (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: frostyflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - frostyflow-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # 监控服务 - Grafana (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: frostyflow-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - frostyflow-network
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus

networks:
  frostyflow-network:
    driver: bridge
    name: frostyflow-net

volumes:
  redis-data:
    name: frostyflow-redis-data
  prometheus-data:
    name: frostyflow-prometheus-data
  grafana-data:
    name: frostyflow-grafana-data